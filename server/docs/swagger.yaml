swagger: "2.0"
info:
  description: "This is a sample reserve.io server. Find out how the application works, making it possible to **insert**, **read**, **edit** and **remove** reservations."
  version: "0.2.0"
  title: "reserve.io"
  contact:
    email: "jeferson.luckas@gmail.com"
  license:
    name: "MIT"
    url: "https://github.com/JefersonLucas/reserve.io/blob/master/LICENSE.md"
host: "localhost:1010"
basePath: "/reserve.io/v1"
tags:
  - name: "reservas"
    description: "Everything about reservations"
schemes:
  - "http"
paths:
  /create:
    post:
      tags:
        - "reservas"
      summary: "Add a new resevation in the database"
      description: ""
      operationId: "addReserve"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Reserve object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Reserva"
      responses:
        "405":
          description: "Invalid input"
  /read:
    get:
      tags:
        - "reservas"
      summary: "Finds all reservation"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "id"
      produces:
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reserva"
        "400":
          description: "Invalid status value"
  /read/{id}:
    get:
      tags:
        - "reservas"
      summary: "Find reservation by id"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findReservationById"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "id"
          in: "path"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reserva"
        "400":
          description: "Invalid tag value"
  /update:
    put:
      tags:
        - "reservas"
      summary: "Update an existing reservation"
      description: ""
      operationId: "updateReserve"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Reserve object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Reserva"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Reserve not found"
        "405":
          description: "Validation exception"
  /delete/{id}:
    delete:
      tags:
        - "reservas"
      summary: "Delete a reservation"
      description: ""
      operationId: "removeReserve"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "id"
          in: "path"
          description: "Reserve id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Reserve not found"
definitions:
  Reserva:
    type: "object"
    required:
      - "user_name"
      - "user_mail"
      - "equipment_name"
      - "equipment_id"
      - "local"
      - "status"
      - "time_in"
      - "time_out"
      - "date_in"
      - "date_out"
    properties:
      user_name:
        type: "string"
        example: "Jeferson Lucas"
      user_mail:
        type: "string"
        example: "jefersonlucas@email.com"
      equipment_name:
        type: "string"
        example: "DataShow S27+"
      equipment_id:
        type: "string"
        example: "03400"
      local:
        type: "string"
        example: "Anatomia I"
      status:
        type: "string"
        description: "reserve status in the database"
        enum:
          - "waiting"
          - "using"
          - "returned"
      time_in:
        type: "string"
        example: "19:00:00"
      time_out:
        type: "string"
        example: "22:00:00"
      date_in:
        type: "string"
        example: "2021-05-11"
      date_out:
        type: "string"
        example: "2021-05-12"
    xml:
      name: "Reserve"
externalDocs:
  description: "Contributing"
  url: "https://github.com/JefersonLucas/reserve.io/blob/master/CONTRIBUTING.md"
